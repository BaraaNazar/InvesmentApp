{"ast":null,"code":"var _jsxFileName = \"/Users/baraanazar/InvestmentApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport InvestmentForm from './Components/InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './Components/InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './Components/InvestmentResults/InvestmentResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState({\n    'current-savings': 0,\n    'yearly-contribution': 0,\n    'expected-return': 0,\n    duration: 0\n  });\n  const handleReset = () => {\n    console.log('reset');\n    setCurrentSavings(0);\n    setYearlyContribution(0);\n    setExpectedReturn(0);\n    setDuration(0);\n  };\n  // const [currentSavings, setCurrentSavings] = useState(0);\n  // const [yearlyContribution, setYearlyContribution] = useState(0);\n  // const [expectedReturn, setExpectedReturn] = useState(0);\n  // const [duration, setDuration] = useState(0);\n\n  // const userInput = [\n  //   currentSavings,\n  //   yearlyContribution,\n  //   expectedReturn,\n  //   duration,\n  // ];\n\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log('hi from app.js');\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InvestmentHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      calculateHandler: calculateHandler,\n      handleReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 61,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"uBpXGbr9QkuRWHwP+vIAw0S8bOA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InvestmentForm","InvestmentHeader","InvestmentResults","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","duration","handleReset","console","log","setCurrentSavings","setYearlyContribution","setExpectedReturn","setDuration","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/baraanazar/InvestmentApp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport InvestmentForm from './Components/InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './Components/InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './Components/InvestmentResults/InvestmentResults';\n\nfunction App() {\n  const [userInput, setUserInput] = useState({\n    'current-savings': 0,\n    'yearly-contribution': 0,\n    'expected-return': 0,\n    duration: 0,\n  });\n  const handleReset = () => {\n    console.log('reset');\n    setCurrentSavings(0);\n    setYearlyContribution(0);\n    setExpectedReturn(0);\n    setDuration(0);\n  };\n  // const [currentSavings, setCurrentSavings] = useState(0);\n  // const [yearlyContribution, setYearlyContribution] = useState(0);\n  // const [expectedReturn, setExpectedReturn] = useState(0);\n  // const [duration, setDuration] = useState(0);\n\n  // const userInput = [\n  //   currentSavings,\n  //   yearlyContribution,\n  //   expectedReturn,\n  //   duration,\n  // ];\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    console.log('hi from app.js');\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <InvestmentHeader />\n\n      <InvestmentForm\n        calculateHandler={calculateHandler}\n        handleReset={handleReset}\n      />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <InvestmentResults />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAOC,gBAAgB,MAAM,gDAAgD;AAC7E,OAAOC,iBAAiB,MAAM,kDAAkD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzC,iBAAiB,EAAE,CAAC;IACpB,qBAAqB,EAAE,CAAC;IACxB,iBAAiB,EAAE,CAAC;IACpBU,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpBC,iBAAiB,CAAC,CAAC,CAAC;IACpBC,qBAAqB,CAAC,CAAC,CAAC;IACxBC,iBAAiB,CAAC,CAAC,CAAC;IACpBC,WAAW,CAAC,CAAC,CAAC;EAChB,CAAC;EACD;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA,MAAMC,gBAAgB,GAAIV,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMW,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACZ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMa,kBAAkB,GAAG,CAACb,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMc,cAAc,GAAG,CAACd,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAME,QAAQ,GAAG,CAACF,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIe,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGb,QAAQ,EAAEa,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGJ,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAII,cAAc,GAAGH,kBAAkB;MACrDF,UAAU,CAACM,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEP,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAT,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;IAE7B;EACF,CAAC;;EAED,oBACER,OAAA;IAAAuB,QAAA,gBACEvB,OAAA,CAACH,gBAAgB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEpB3B,OAAA,CAACJ,cAAc;MACbiB,gBAAgB,EAAEA,gBAAiB;MACnCP,WAAW,EAAEA;IAAY;MAAAkB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAIF3B,OAAA,CAACF,iBAAiB;MAAA0B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV;AAACzB,EAAA,CApEQD,GAAG;AAAA2B,EAAA,GAAH3B,GAAG;AAsEZ,eAAeA,GAAG;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}