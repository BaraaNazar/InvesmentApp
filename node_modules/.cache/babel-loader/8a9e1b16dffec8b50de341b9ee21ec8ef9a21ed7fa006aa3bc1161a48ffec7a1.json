{"ast":null,"code":"var _jsxFileName = \"/Users/baraanazar/InvestmentApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport InvestmentForm from './InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './InvestmentResults/InvestmentResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [currentSavings, setCurrentSaving] = useState(0);\n  const [yearlyContribution, setYearlyContribution] = useState(0);\n  const [expectedReturn, setExpectedReturn] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [userInput, setUserInput] = useState([currentSavings, yearlyContribution, expectedReturn, duration]);\n  const handleUserInput = event => {\n    setCurrentSaving(event.target.value);\n    setYearlyContribution(event.target.value);\n    setExpectedReturn(event.target.value);\n    setDuration(event.target.value);\n  };\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InvestmentHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      handleUserInput: handleUserInput\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 52,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"CnQHf+qotJaiBefqYbJgy6krQiY=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InvestmentForm","InvestmentHeader","InvestmentResults","jsxDEV","_jsxDEV","App","_s","currentSavings","setCurrentSaving","yearlyContribution","setYearlyContribution","expectedReturn","setExpectedReturn","duration","setDuration","userInput","setUserInput","handleUserInput","event","target","value","calculateHandler","yearlyData","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/baraanazar/InvestmentApp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport InvestmentForm from './InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './InvestmentResults/InvestmentResults';\n\nfunction App() {\n  const [currentSavings, setCurrentSaving] = useState(0);\n  const [yearlyContribution, setYearlyContribution] = useState(0);\n  const [expectedReturn, setExpectedReturn] = useState(0);\n  const [duration, setDuration] = useState(0);\n  const [userInput, setUserInput] = useState([\n    currentSavings,\n    yearlyContribution,\n    expectedReturn,\n    duration,\n  ]);\n\n  const handleUserInput = (event) => {\n    setCurrentSaving(event.target.value);\n    setYearlyContribution(event.target.value);\n    setExpectedReturn(event.target.value);\n    setDuration(event.target.value);\n  };\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <InvestmentHeader />\n\n      <InvestmentForm handleUserInput={handleUserInput} />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <InvestmentResults />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,iCAAiC;AAC5D,OAAOC,gBAAgB,MAAM,qCAAqC;AAClE,OAAOC,iBAAiB,MAAM,uCAAuC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtE,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,cAAc,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAC,CAAC,CAAC;EACtD,MAAM,CAACU,kBAAkB,EAAEC,qBAAqB,CAAC,GAAGX,QAAQ,CAAC,CAAC,CAAC;EAC/D,MAAM,CAACY,cAAc,EAAEC,iBAAiB,CAAC,GAAGb,QAAQ,CAAC,CAAC,CAAC;EACvD,MAAM,CAACc,QAAQ,EAAEC,WAAW,CAAC,GAAGf,QAAQ,CAAC,CAAC,CAAC;EAC3C,MAAM,CAACgB,SAAS,EAAEC,YAAY,CAAC,GAAGjB,QAAQ,CAAC,CACzCQ,cAAc,EACdE,kBAAkB,EAClBE,cAAc,EACdE,QAAQ,CACT,CAAC;EAEF,MAAMI,eAAe,GAAIC,KAAK,IAAK;IACjCV,gBAAgB,CAACU,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACpCV,qBAAqB,CAACQ,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACzCR,iBAAiB,CAACM,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;IACrCN,WAAW,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EACjC,CAAC;EACD,MAAMC,gBAAgB,GAAIN,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMO,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIf,cAAc,GAAG,CAACQ,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMN,kBAAkB,GAAG,CAACM,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMJ,cAAc,GAAG,CAACI,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAMF,QAAQ,GAAG,CAACE,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIQ,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGV,QAAQ,EAAEU,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGjB,cAAc,GAAGI,cAAc;MACtDJ,cAAc,IAAIiB,cAAc,GAAGf,kBAAkB;MACrDa,UAAU,CAACG,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEpB,cAAc;QAChCE,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;;IAEA;EACF,CAAC;;EAED,oBACEL,OAAA;IAAAwB,QAAA,gBACExB,OAAA,CAACH,gBAAgB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEpB5B,OAAA,CAACJ,cAAc;MAACiB,eAAe,EAAEA;IAAgB;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAIpD5B,OAAA,CAACF,iBAAiB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV;AAAC1B,EAAA,CAxDQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA0DZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}