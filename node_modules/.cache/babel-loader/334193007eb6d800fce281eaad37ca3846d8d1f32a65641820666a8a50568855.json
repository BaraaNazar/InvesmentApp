{"ast":null,"code":"var _jsxFileName = \"/Users/baraanazar/InvestmentApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport InvestmentForm from './Components/InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './Components/InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './Components/InvestmentResults/InvestmentResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userInput, setUserInput] = useState({\n    'current-savings': 1000,\n    'yearly-contribution': 1222,\n    'expected-return': 12222,\n    duration: 1\n  });\n  const handleChanges = e => {\n    setUserInput({\n      ...userInput,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleReset = () => {\n    console.log('reset');\n    setUserInput({}); // reset the state\n  };\n\n  const calculateHandler = userInput => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log('hi from app.js');\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InvestmentHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      calculateHandler: calculateHandler,\n      handleReset: handleReset\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentResults, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"IOGMWsZKV0tttAWDHhDvSp6zUsA=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InvestmentForm","InvestmentHeader","InvestmentResults","jsxDEV","_jsxDEV","App","_s","userInput","setUserInput","duration","handleChanges","e","target","name","value","handleReset","console","log","calculateHandler","yearlyData","currentSavings","yearlyContribution","expectedReturn","i","yearlyInterest","push","year","savingsEndOfYear","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/baraanazar/InvestmentApp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport InvestmentForm from './Components/InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './Components/InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './Components/InvestmentResults/InvestmentResults';\n\nfunction App() {\n  const [userInput, setUserInput] = useState({\n    'current-savings': 1000,\n    'yearly-contribution': 1222,\n    'expected-return': 12222,\n    duration: 1,\n  });\n  const handleChanges = (e) => {\n    setUserInput({\n      ...userInput,\n      [e.target.name]: e.target.value,\n    });\n  };\n  const handleReset = () => {\n    console.log('reset');\n    setUserInput({}); // reset the state\n  };\n\n  const calculateHandler = (userInput) => {\n    // Should be triggered when form is submitted\n    // You might not directly want to bind it to the submit event on the form though...\n\n    const yearlyData = []; // per-year results\n\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      yearlyData.push({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    console.log('hi from app.js');\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <InvestmentHeader />\n\n      <InvestmentForm\n        calculateHandler={calculateHandler}\n        handleReset={handleReset}\n      />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <InvestmentResults />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAOC,gBAAgB,MAAM,gDAAgD;AAC7E,OAAOC,iBAAiB,MAAM,kDAAkD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC;IACzC,iBAAiB,EAAE,IAAI;IACvB,qBAAqB,EAAE,IAAI;IAC3B,iBAAiB,EAAE,KAAK;IACxBU,QAAQ,EAAE;EACZ,CAAC,CAAC;EACF,MAAMC,aAAa,GAAIC,CAAC,IAAK;IAC3BH,YAAY,CAAC;MACX,GAAGD,SAAS;MACZ,CAACI,CAAC,CAACC,MAAM,CAACC,IAAI,GAAGF,CAAC,CAACC,MAAM,CAACE;IAC5B,CAAC,CAAC;EACJ,CAAC;EACD,MAAMC,WAAW,GAAGA,CAAA,KAAM;IACxBC,OAAO,CAACC,GAAG,CAAC,OAAO,CAAC;IACpBT,YAAY,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACpB,CAAC;;EAED,MAAMU,gBAAgB,GAAIX,SAAS,IAAK;IACtC;IACA;;IAEA,MAAMY,UAAU,GAAG,EAAE,CAAC,CAAC;;IAEvB,IAAIC,cAAc,GAAG,CAACb,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMc,kBAAkB,GAAG,CAACd,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMe,cAAc,GAAG,CAACf,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAME,QAAQ,GAAG,CAACF,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIgB,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGd,QAAQ,EAAEc,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGJ,cAAc,GAAGE,cAAc;MACtDF,cAAc,IAAII,cAAc,GAAGH,kBAAkB;MACrDF,UAAU,CAACM,IAAI,CAAC;QACd;QACAC,IAAI,EAAEH,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BG,gBAAgB,EAAEP,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAL,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC;;IAE7B;EACF,CAAC;;EAED,oBACEb,OAAA;IAAAwB,QAAA,gBACExB,OAAA,CAACH,gBAAgB;MAAA4B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEpB5B,OAAA,CAACJ,cAAc;MACbkB,gBAAgB,EAAEA,gBAAiB;MACnCH,WAAW,EAAEA;IAAY;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC,eAIF5B,OAAA,CAACF,iBAAiB;MAAA2B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClB,CAAC;AAEV;AAAC1B,EAAA,CA5DQD,GAAG;AAAA4B,EAAA,GAAH5B,GAAG;AA8DZ,eAAeA,GAAG;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}