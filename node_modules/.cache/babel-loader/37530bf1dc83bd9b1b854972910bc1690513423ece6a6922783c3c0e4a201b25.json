{"ast":null,"code":"var _jsxFileName = \"/Users/baraanazar/InvestmentApp/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport InvestmentForm from './Components/InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './Components/InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './Components/InvestmentResults/InvestmentResults';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [yearlyData, setYearlyData] = useState([{\n    year: i + 1,\n    yearlyInterest: yearlyInterest,\n    savingsEndOfYear: currentSavings,\n    yearlyContribution: yearlyContribution\n  }]);\n  const calculateHandler = userInput => {\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      setYearlyData({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution\n      });\n    }\n    console.log(yearlyData);\n\n    // do something with yearlyData ...\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(InvestmentHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentForm, {\n      onClaculate: calculateHandler\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InvestmentResults, {\n      yearlyData: yearlyData\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"vhbvI4iVe3G9RL+jkp8p2YLXgyk=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","InvestmentForm","InvestmentHeader","InvestmentResults","jsxDEV","_jsxDEV","App","_s","yearlyData","setYearlyData","year","i","yearlyInterest","savingsEndOfYear","currentSavings","yearlyContribution","calculateHandler","userInput","expectedReturn","duration","console","log","children","fileName","_jsxFileName","lineNumber","columnNumber","onClaculate","_c","$RefreshReg$"],"sources":["/Users/baraanazar/InvestmentApp/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport InvestmentForm from './Components/InvestmentForm/InvestmentForm';\nimport InvestmentHeader from './Components/InvestmentHeader/InvestmentHeader';\nimport InvestmentResults from './Components/InvestmentResults/InvestmentResults';\n\nfunction App() {\n  const [yearlyData, setYearlyData] = useState([\n    {\n      year: i + 1,\n      yearlyInterest: yearlyInterest,\n      savingsEndOfYear: currentSavings,\n      yearlyContribution: yearlyContribution,\n    },\n  ]);\n  const calculateHandler = (userInput) => {\n    let currentSavings = +userInput['current-savings']; // feel free to change the shape of this input object!\n    const yearlyContribution = +userInput['yearly-contribution']; // as mentioned: feel free to change the shape...\n    const expectedReturn = +userInput['expected-return'] / 100;\n    const duration = +userInput['duration'];\n\n    // The below code calculates yearly results (total savings, interest etc)\n    for (let i = 0; i < duration; i++) {\n      const yearlyInterest = currentSavings * expectedReturn;\n      currentSavings += yearlyInterest + yearlyContribution;\n      setYearlyData({\n        // feel free to change the shape of the data pushed to the array!\n        year: i + 1,\n        yearlyInterest: yearlyInterest,\n        savingsEndOfYear: currentSavings,\n        yearlyContribution: yearlyContribution,\n      });\n    }\n    console.log(yearlyData);\n\n    // do something with yearlyData ...\n  };\n\n  return (\n    <div>\n      <InvestmentHeader />\n\n      <InvestmentForm onClaculate={calculateHandler} />\n\n      {/* Todo: Show below table conditionally (only once result data is available) */}\n      {/* Show fallback text if no data is available */}\n      <InvestmentResults yearlyData={yearlyData} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,cAAc,MAAM,4CAA4C;AACvE,OAAOC,gBAAgB,MAAM,gDAAgD;AAC7E,OAAOC,iBAAiB,MAAM,kDAAkD;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjF,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGT,QAAQ,CAAC,CAC3C;IACEU,IAAI,EAAEC,CAAC,GAAG,CAAC;IACXC,cAAc,EAAEA,cAAc;IAC9BC,gBAAgB,EAAEC,cAAc;IAChCC,kBAAkB,EAAEA;EACtB,CAAC,CACF,CAAC;EACF,MAAMC,gBAAgB,GAAIC,SAAS,IAAK;IACtC,IAAIH,cAAc,GAAG,CAACG,SAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;IACpD,MAAMF,kBAAkB,GAAG,CAACE,SAAS,CAAC,qBAAqB,CAAC,CAAC,CAAC;IAC9D,MAAMC,cAAc,GAAG,CAACD,SAAS,CAAC,iBAAiB,CAAC,GAAG,GAAG;IAC1D,MAAME,QAAQ,GAAG,CAACF,SAAS,CAAC,UAAU,CAAC;;IAEvC;IACA,KAAK,IAAIN,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGQ,QAAQ,EAAER,CAAC,EAAE,EAAE;MACjC,MAAMC,cAAc,GAAGE,cAAc,GAAGI,cAAc;MACtDJ,cAAc,IAAIF,cAAc,GAAGG,kBAAkB;MACrDN,aAAa,CAAC;QACZ;QACAC,IAAI,EAAEC,CAAC,GAAG,CAAC;QACXC,cAAc,EAAEA,cAAc;QAC9BC,gBAAgB,EAAEC,cAAc;QAChCC,kBAAkB,EAAEA;MACtB,CAAC,CAAC;IACJ;IACAK,OAAO,CAACC,GAAG,CAACb,UAAU,CAAC;;IAEvB;EACF,CAAC;;EAED,oBACEH,OAAA;IAAAiB,QAAA,gBACEjB,OAAA,CAACH,gBAAgB;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAEpBrB,OAAA,CAACJ,cAAc;MAAC0B,WAAW,EAAEX;IAAiB;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC,eAIjDrB,OAAA,CAACF,iBAAiB;MAACK,UAAU,EAAEA;IAAW;MAAAe,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC1C,CAAC;AAEV;AAACnB,EAAA,CA3CQD,GAAG;AAAAsB,EAAA,GAAHtB,GAAG;AA6CZ,eAAeA,GAAG;AAAC,IAAAsB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}